package MapInfo;

import java.util.*;
import ItemInfo.*;
import EntityInfo.*;
import PirateGame.*;

/*
Change Log #1 :
Fixed the package importation error and changed the necessar Array List

Change Log #2 : 
Changed Island names :))))

Change Log #3 :
Added chance to get armor for each location
Deleted item array list, and added material chances
Put randomized materials into generated special location
changed temp to armorChance

Change Log #4: 
Added random monster array list
added if statement for sailing

Change Log $5:
Added armor
did battle sequences when sailing
added printlns and delays to make the game interface cleaner
added potion chances each time a monster is killed
*/

/*
    //Names of Clothing
    private ArrayList<String> clothingNames = new ArrayList<String>(Arrays.asList
            ("Boot", "Belt", "Breeches", "Doublet", "Tri-Cornered Hat"
            , "Motley Shirt"));
    
    //Names of Weapons
    
    private ArrayList<String> weaponNames = new ArrayList<String>(Arrays.asList
            ("Cutlass", "Rapier", "Dagger", "Pike", "Axe"
            , "Revolver", "Flintlock", "Blunderbuss", "Musket"));
    */
    
    //Names of sea monsters
    
    
    //Names of land monsters
    
    //takes in difficulty and generates map
public class Map1
{
    private int progress;
    public final int totalDistance = 100;
    private ArrayList<SpecialLocation> locations = new ArrayList<SpecialLocation>();
    private ArrayList<String> placeNames = new ArrayList<String>(Arrays.asList
        ("Conomi Islands", "The Mighty Isles", "The Infernal Islands", 
        "West Blue", "Vrahz Ait", "Irf Atoll", "Swallow Island", 
        "Eems Archipelago", "Cremuz Archipelago", "Tryohst Enclave", 
        "The Neverending Key", "Dressrosa", "The Enchanted Key", 
        "The Sandy Skerry", "Yst Enclave", "Alabasta", 
        "Marine Ford", "Futohx Chain", "Wano Country", 
        "Tryfaq Enclave"));
    
  
    public Object[] sail(Pirate pirate, Ship ship)
    {
        progress += 2;//2 naut miles taken
        System.out.println("*****************************************************");
        System.out.println("You have sailed 2 nautical miles");
        boolean onLand = false;
        
        
        for(SpecialLocation island : locations)
        {
            //if Island was encountered, will execute land battle sequence
            if(island.getLocation() <= progress && island.getLocation() > (progress - 2))
            {
                System.out.println("You have reached " + island.getName());
                delay(2000);
                
                //goes through every monster on the island
                for(LandMonster mon : island.getMonsters())
                {
                    pirate = PirateGame.landBattle(pirate, mon);
                    
                    //percent chance that player will recieve a potion
                    int potionChance = (int)(2 * Math.random());
                    if(potionChance == 1)
                    {
                        pirate.setPotionInv(pirate.getPotionInv() + 1);
                    }
                    
                    
                    //checks if player is still alive
                    if(!PirateGame.getGameStatus())
                    {
                        break;
                    }
                    
                }
                
                //Collect all items on island
                //Collect armor, if has any
                if(island.getHasArmor())
                {
                    
                    boolean fullArmor = false;
                    //flavor text
                    switch(pirate.getArmorAmt())
                    {
                        case 1:
                            System.out.println("You recieved a Tri-Cornered Hat from the Island!");
                            
                        case 2:
                            System.out.println("You recieved a Doublet from the Island!");
                            
                        case 3:
                            System.out.println("You recieved Breeches from the Island!");
                            
                        case 4:
                            System.out.println("You recieved Boots from the Island!");
                            
                        default:
                            if(pirate.getArmorAmt() > 0)
                            {
                                fullArmor = true;
                                System.out.println("You already have a full set!");
                            }
                            else
                                System.out.println("nani? armor recieving bug here");
                    }
                    
                    //each armor gives 8% mitigation, unless if full on armor
                    System.out.println("It supplies 8% dmg mitigation.");
                    if(!fullArmor)
                        pirate.setArmor(pirate.getArmor() + 8);
                    
                    //keeps track of how many armor pieces you have
                    if(!fullArmor)
                        pirate.setArmorAmt(pirate.getArmorAmt() + 1);
                }
                
                //Collects weapon Upgrade, if have any
                
                //checks if player died
                if(!PirateGame.getGameStatus())
                {
                    break;
                }
                onLand = true;
            }
            
            
        }
        
        if(!onLand)
        {
            
            int sMChance = (int)(3 * Math.random());
            if(sMChance == 0)
            {
                //does battle sequence for sea battle
                System.out.println("You have encountered a sea monster!");
                ship = PirateGame.seaBattle(ship, SeaMonster.createSM());
                delay(2000);
                
                //percent chance that player will recieve a potion
                int potionChance = (int)(2 * Math.random());
                if(potionChance == 1)
                {
                    System.out.println("You recieved a potion!");
                    pirate.setPotionInv(pirate.getPotionInv() + 1);
                }
                
            } else {
                System.out.println("The waters were calm");
                delay(2000);
            }
        }
        
        Object[] player = {pirate, ship};
        return player;
        
    }
    
    public void createMap(int difficulty)
    {
        difficulty *= 5;
        int armorChance = 100;
        for(int x = 0; x < difficulty - 1; x++)
        {
            //Make a random generator to make monsters.
            ArrayList<LandMonster> monsters = new ArrayList<LandMonster>();
            for(int a = 0; a < 3; a++)
                monsters.add(LandMonster.createLM());
            
            //Determines if location will have armor or not
            int tempNum1 = (int)(100 * Math.random());
            boolean armor = (tempNum1 < armorChance) ? true : false;
            
            //Determines if the player will recieve a weapon upgrade or not
            int weaponMat = (int)(2 * Math.random());
            
            //determines if the player will recieve an armor upgrade or not
            int armorMat = (int)(3 * Math.random() + 1);
            
            //determines if the player will recieve a ship upgrade or not
            int shipMat = (int)(5 * Math.random() + 1);
            
            //special location requires location and monster list
            /*
                Attributes listed in order
                name
                distance
                monster
                armor
                weaponMaterials
                armorMaterials
                shipMaterials
            */
            
            locations.add(new SpecialLocation(
                    placeNames.get((placeNames.size() - 1) * (int)(Math.random())), 
                    totalDistance - (x * (totalDistance / difficulty)), 
                    monsters,
                    armor, 
                    weaponMat,
                    armorMat,
                    shipMat));
            
            //decreases chance to get armor each time a piece of armor is recieved
            if(armor)
            armorChance -= 25;
        }
    }
    
    //delays time when given a quantity(will be in miliseconds).
    public static void delay(long time) {
        try {
            Thread.sleep(time);
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }
    
    
    
}
