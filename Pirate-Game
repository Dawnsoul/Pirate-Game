package PirateGame;

/*
Driver *
*/

import EntityInfo.*;
import ItemInfo.*;
import MapInfo.*;
import java.util.*;
import javax.swing.JOptionPane;

public class PirateGame {

   static Scanner scan = new Scanner(System.in);
   static boolean gameStatus = false;
    
    public static void main(String[] args) {
            Pirate pirate = new Pirate();
            Map1 map = new Map1();
            Ship ship = new Ship();
            
            
            System.out.println("Do you wish to start the Pirate Adventurey"
                    + "? Y/N");
            String input = scan.next();
            
            if(input.equals("Y") || input.equals("y")) {
                gameStatus = true;
                for(int i = 0; i < 100; i++) {
                    System.out.println("\n");
                }
            } else if(input.equals("N") || input.equals("n")) {
                gameStatus = false;
                for(int i = 0; i < 100; i++) {
                    System.out.println("\n");
                }
                System.out.println("The adventure has ended.");
                
            } else {
                gameStatus = false;
                for(int i = 0; i < 100; i++) {
                    System.out.println("\n");
                }
                JOptionPane.showMessageDialog(null, "You have entered in a value that is neither Y/N.");
            }
            
            while(gameStatus) {
                pirate.createPirate(pirate);
                ship.createShip(ship);
                
                System.out.println("Welcome aboard " + " '" + pirate.getStatus() + "' " + " " + pirate.getName() + " on the " + " '" + ship.getName() + "' ");
                int difficulty = userInput(1, 3, "Please choose your difficulty level, and the game may begin: 1-3");
                map.createMap(difficulty);
                
                for(int i = 0; i < 100; i++) {
                    System.out.println("\n");
                }
                
                System.out.println("The Game Has Started.");
                map.sail();
              
            }
            
    }
    
    //gets an input from the user using scanner
    public static int userInput(int range1, int range2, String question) {
        Scanner scan = new Scanner (System.in);
        boolean complete = false;
        
        System.out.println(question);
        
        int input = 0;
        while(!complete) {
            complete = true;
            try{
                input = scan.nextInt();
            } catch(Exception e){
                System.out.println("///////////////////////////////////////////////////////");
                System.out.println("Please enter an appropriate integer " + range1 + "-" + range2);
                System.out.println("////////////////////////////////////////////////////////"
                        + "\n>");
                scan.next();
                complete = false;
                continue;
            
            }
            if(input < range1 || input > range2) {
                complete = false;
                System.out.println("///////////////////////////////////////////////////////");
                System.out.println("Please enter an appropriate integer " + range1 + "-" + range2);
                System.out.println("////////////////////////////////////////////////////////"
                        + "\n>");
            }
        }
        return input;
    
    }
    
    //gets an input from the user using the JOptionPane class
    public static int userInput2(int range1, int range2, String question) {
        Scanner scan = new Scanner (System.in);
        boolean complete = false;
        int input = 0;
        
        
        //while loop repeats question until the user inputs a valid number.
        while(!complete) {
            complete = true;
            
            //asks the question, and recieves and checks answers all by using JOptionPane.
            try{
                input = Integer.parseInt(JOptionPane.showInputDialog(null, question));
            } catch(Exception e){
                JOptionPane.showMessageDialog(null, "///////////////////////////////////////////////////////"
                + "\nPlease enter an appropriate integer " + range1 + "-" + range2
                + "\n////////////////////////////////////////////////////////");
                complete = false;
                continue;
            
            }
            if(input < range1 || input > range2) {
                complete = false;
                JOptionPane.showMessageDialog(null, "///////////////////////////////////////////////////////"
                + "\nPlease enter an appropriate integer " + range1 + "-" + range2
                + "\n////////////////////////////////////////////////////////");
            }
        }
        return input;
    }
    
      
    public static Ship seaBattle(Ship x, SeaMonster y) {
        boolean enemyDead = false;   
        boolean monsterAction = false;
        boolean playerDecision;
        int actionDecision;
        
        while(!enemyDead) {
            //determines if player is finished making decisions
            playerDecision = false;
            
            //displays information about the monster
            System.out.println("Name : " + y.getName());
            System.out.println("---------------------------------------");
            System.out.println("HP : " + y.getHealth() + " ENERGY : " + y.getEnergy() + " ATT : " + y.getDamage());
            
            System.out.println("\n\n");
            
            //displays information about the ship
            System.out.println("Name : " + x.getName());
            System.out.println("---------------------------------------");
            System.out.println("Hull Status : " + x.getHullStatus() + " ATT : " + x.getCannonDamage() + " Repair Mode : " + x.getRepairMode());
            
            //battle sequence
            while(!playerDecision) {
                    actionDecision = (int) userInput2(0, 2, 
                        "Strategy"
                    +   "\nAttack >: 0" 
                    +   "\nPanic Repair Mode >: 1"
                    +   "\nSuicide Attack :> 2");
                
                if(actionDecision == 0) { 
                    int b = y.getHealth() - x.getCannonDamage();
                    y.setHealth(b);
                    
                    if(y.getHealth() < 0 || y.getHealth() == 0) {
                        y.setHealth(0);
                        playerDecision = true;
                        JOptionPane.showMessageDialog(null, "The ship has successfully slain the " + y.getName());
                        enemyDead = true;
                    }
                
                    if(y.getHealth() > 0) {
                        JOptionPane.showMessageDialog(null, "The ship has attacked " + y.getName() + " for " + x.getCannonDamage() + " damage");
                        
                        if(x.getHullStatus() < 80) {
                            int a = x.getHullStatus() + 5;
                            x.setHullStatus(a);
                            JOptionPane.showMessageDialog(null, "The ship has restored 5 Pts of its Hull, with the Hull currently at >: " + x.getHullStatus());
                            
                        }
                        playerDecision = true;
                        
                    }
                    
                }
                
                if(actionDecision == 1) {
                    String input = JOptionPane.showInputDialog(null, "WARNING. WARNING. WARNING."
                                                +     "\nPANIC REPAIR MODE INSTANTLY RECOVERS 30 PTS TO THE HULL."
                                                +     "\nYOU WILL LOSE CANNON DAMAGE PERMANENTLY."
                                                +     "\nPROCEED? Y/N");
                    
                    if(input.equalsIgnoreCase("y")) {
                        int c = x.getHullStatus() + 30;
                        x.setHullStatus(c);
                        
                        int d = x.getCannonDamage() - 1;
                        x.setCannonDamage(d);
                        playerDecision = true;
                    } else if(input.equalsIgnoreCase("n")) {
                        JOptionPane.showMessageDialog(null, "The ship does nothing...");
                        playerDecision = false;
                    } else {
                        JOptionPane.showMessageDialog(null, "You have not chose Y/N.");
                        playerDecision = false;
                    }
                }
                
                if(actionDecision == 2) {
                    String input2 = JOptionPane.showInputDialog(null, "WARNING. WARNING. WARNING." 
                                                                +     "\nSuicide Attack will completely destroy the monster."
                                                                +     "\nIt will set your Hull Pts to 1."
                                                                +     "\nProceed? Y/N");
                    
                    if(input2.equalsIgnoreCase("y")) {
                        x.setHullStatus(1);
                        y.setHealth(0);
                        playerDecision = true;
                        
                        JOptionPane.showMessageDialog(null, "The ship has slain the " + y.getName() + " with great cost.");
                        playerDecision = true;
                        enemyDead = true;
                        
                    } else if(input2.equalsIgnoreCase("n")) {
                        JOptionPane.showMessageDialog(null, "The ship does nothing...");
                        playerDecision = false;
                    } else {
                        JOptionPane.showMessageDialog(null, "You have not chose Y/N.");
                        playerDecision = false;
                    }
                }
                
                while(!monsterAction) {
                    if(y.getEnergy() > 0) {
                        
                        if(y.getEnergy() != 10) {
                            int q = x.getHullStatus() - y.getDamage();
                            x.setHullStatus(q);
                            
                            if(x.getHullStatus() > 0) {
                                JOptionPane.showMessageDialog(null, "The " + y.getName() + " has attacked the ship for " + y.getDamage()
                                                        +       "\nThe ship now has " + x.getHullStatus() + " pts.");
                                int e = y.getEnergy() + 1;
                                y.setEnergyRecovery(e);
                                monsterAction = true;
                                
                            }
                            
                            if(x.getHullStatus() < 0 || x.getHullStatus() == 0) {
                                JOptionPane.showMessageDialog(null, "The " + y.getName() + " has destroyed the ship.");
                                monsterAction = true;
                                gameStatus = false;
                                
                            }
                            
                        }
                    
                    if(y.getEnergy() < 0 || y.getEnergy() == 0) {
                        JOptionPane.showMessageDialog(null, "The monster does not attack because it is out of energy.");
                        int z = y.getEnergy() + 1;
                        y.setEnergyRecovery(z);
                        monsterAction = true;
                        
                    }    
                    
                    if(y.getEnergy() == 10) {
                        y.specialAttack();
                        
                        if(x.getHullStatus() < 0 || x.getHullStatus() == 0) {
                            JOptionPane.showMessageDialog(null, "The " + y.getName() + " has destroyed the ship.");
                            monsterAction = true;
                            gameStatus = false;
                                
                        }
                        
                        if(x.getHullStatus() > 0) {
                            JOptionPane.showMessageDialog(null, "The " + y.getName() + " has attacked the ship with its special attack."
                                                            +   "The ship currently has + " + x.getHullStatus() + "pts.");
                            int z = y.getEnergy() + 1;
                            y.setEnergyRecovery(z);
                            monsterAction = true;
                            
                        }
                        
                        
                    } 
                    
                    
                } 
            }
            
            

        }
    
            
    }
        
        return x;
    
}
}
